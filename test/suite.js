void function() {
	'use strict';

	// polyfill for Object.assign...
	if (typeof Object.assign !== 'function') {
		Object.assign = function(target, varArgs) { // .length of function is 2
			'use strict';
			if (target === null) { // TypeError if undefined or null
				throw new TypeError('Cannot convert undefined or null to object');
			}
			var to = Object(target);
			for (var index = 1; index < arguments.length; index++) {
				var nextSource = arguments[index];
				if (nextSource !== null) { // Skip over if undefined or null
					for (var nextKey in nextSource) {
						// Avoid bugs when hasOwnProperty is shadowed
						if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
							to[nextKey] = nextSource[nextKey];
						}
					}
				}
			}
			return to;
		};
	}

	// detect whether :scope is supported in querySelector()...
	var scopeSupported = true;
	try {
		document.body.querySelector(':scope > #test-display-area');
	} catch (e) {
		console.warn("CSS :scope not supported by this browser!");
		scopeSupported = false;
	}

	var testNodes = {
		cookieCutAppendArea: document.getElementById('cookie-cut-append-area'),
		inplace: document.getElementById('inplace-test-node'),
		cookieCutter: document.getElementById('cookie-cutter-test-node'),
		cookieCutterComplex: document.getElementById('cookie-cutter-complex-test-node'),
		cookieCutterTemplate: document.getElementById('cookie-cutter-test-template'),
		// for test read...
		inplaceH3: document.querySelector('#inplace-test-node h3')
	};

	var lastUID = 0;
	function issueNewUID() {
		return 'uid-' + (lastUID++);
	}

	suite('Basic constructor tests', function() {
		test('constructor exists', function() {
			assert.strictEqual(typeof Binder, 'function');
		});

		test('default instantiation is cookie-cutter', function() {
			var binder = new Binder(testNodes.cookieCutter, {
				'h3': 'Data .name = {{name}}',
				'h4': 'Generated by:- Suite: "{{suiteName}}" Test: "{{testName}}"'
			});
			assert.strictEqual(binder.isInplace, false, 'Default construct should not be in-place!');
		});

	});

	suite('Cookie-cutter mode', function() {
		test('construct and bind from dom node', function() {
			var newUid = issueNewUID();
			var binder = new Binder(testNodes.cookieCutter, {
				'@id': 'uid',
				'h3': 'Data .name = {{name}}',
				'h4': 'Generated by:- Suite: "{{suiteName}}" Test: "{{testName}}"'
			});
			var boundNode = binder.bind({
				'uid': newUid,
				'name': 'FOO',
				'suiteName': 'Cookie-cutter mode',
				'testName': 'construct and bind from dom node'
			});
			testNodes.cookieCutAppendArea.appendChild(boundNode);
			var appendedNode = testNodes.cookieCutAppendArea.querySelector('#' + newUid);
			assert.strictEqual(appendedNode.querySelector('h3').textContent, 'Data .name = FOO');
		});

		test('construct and bind from string template', function() {
			var newUid = issueNewUID();
			var binder = new Binder('<div id="cookie-cutter-test-node" class="cookie-cut">' +
					'<h2>Cookie-cutter Binder Test String</h2>' +
					'<h3>[THIS TEXT IS REPLACED]</h3>' +
					'<h4>[THIS TEXT IS REPLACED]</h4>' +
				'</div>', {
				'@id': 'uid',
				'h3': 'Data .name = {{name}}',
				'h4': 'Generated by:- Suite: "{{suiteName}}" Test: "{{testName}}"'
			});
			var boundNode = binder.bind({
				'uid': newUid,
				'name': 'FOO',
				'suiteName': 'Cookie-cutter mode',
				'testName': 'construct and bind from string template'
			});
			testNodes.cookieCutAppendArea.appendChild(boundNode);
			var appendedNode = testNodes.cookieCutAppendArea.querySelector('#' + newUid);
			assert.strictEqual(appendedNode.querySelector('h3').textContent, 'Data .name = FOO');
		});

		test('construct fails with selector to non-existent node', function() {
			var binder;
			var failed = false;
			try {
				var binder = new Binder(testNodes.cookieCutter, {
					'@id': 'uid',
					'h3': 'Data .name = {{name}}',
					'h4': 'Generated by:- Suite: "{{suiteName}}" Test: "{{testName}}"',
					'h5': function(data) {
						return "THIS POINTS TO A NODE THAT ISN'T THERE!"
					}
				});
			} catch (e) {
				failed = true;
			}
			assert.strictEqual(typeof binder, 'undefined', 'Binder should not have been constructed');
			assert(failed, 'Binder construct should fail with reference to non-existent node');
		});

		test('@event.bound binding (event fires)', function() {
			var newUid = issueNewUID();
			var boundEventFired = false;
			var binder = new Binder(testNodes.cookieCutter, {
				'@id': 'uid',
				'h3': 'Data .name = {{name}}',
				'h4': 'Generated by:- Suite: "{{suiteName}}" Test: "{{testName}}"',
				'@event.bound': function(evt, boundNode, targetNode, data) {
					boundEventFired = true;
				}
			});
			var testData = {
				'uid': newUid,
				'name': 'FOO',
				'suiteName': 'Cookie-cutter mode',
				'testName': '@event.bound binding (event fires)'
			};
			testNodes.cookieCutAppendArea.appendChild(binder.bind(testData));
			assert.strictEqual(boundEventFired, true, 'Binding @event.bound should gave fired');
		});

		test('rebind', function() {
			var newUid = issueNewUID();
			var boundEventFired = false;
			var binder = new Binder(testNodes.cookieCutter, {
				'@id': 'uid',
				'h3': 'Data .name = {{name}}',
				'h4': 'Generated by:- Suite: "{{suiteName}}" Test: "{{testName}}"',
				'@event.bound': function(evt, boundNode, targetNode, data) {
					boundEventFired = true;
				}
			});
			var testData = {
				'uid': newUid,
				'name': 'FOO',
				'suiteName': 'Cookie-cutter mode',
				'testName': 'rebind'
			};
			var boundNode = binder.bind(testData);
			testNodes.cookieCutAppendArea.appendChild(boundNode);
			var appendedNode = testNodes.cookieCutAppendArea.querySelector('#' + newUid);
			assert.strictEqual(appendedNode.querySelector('h3').textContent, 'Data .name = FOO');
			var newData = Object.assign({}, testData, {
				'name': 'BAR'
			});
			binder.rebind(newData, appendedNode);
			assert.strictEqual(appendedNode.querySelector('h3').textContent, 'Data .name = BAR');
		});

		test('rebind (once only bindings not re-bound)', function() {
			var newUid = issueNewUID();
			var boundEventFired = false;
			var binder = new Binder(testNodes.cookieCutter, {
				'!@id': 'uid',
				'h3': 'Data .name = {{name}}',
				'h4': 'Generated by:- Suite: "{{suiteName}}" Test: "{{testName}}"',
				'@event.bound': function(evt, boundNode, targetNode, data) {
					boundEventFired = true;
				}
			});
			var testData = {
				'uid': newUid,
				'name': 'FOO',
				'suiteName': 'Cookie-cutter mode',
				'testName': 'rebind (once only bindings not re-bound)'
			};
			var boundNode = binder.bind(testData);
			testNodes.cookieCutAppendArea.appendChild(boundNode);
			var appendedNode = testNodes.cookieCutAppendArea.querySelector('#' + newUid);
			assert.strictEqual(appendedNode.querySelector('h3').textContent, 'Data .name = FOO');
			var newData = Object.assign({}, testData, {
				'uid': issueNewUID(),
				'name': 'BAR'
			});
			binder.rebind(newData, appendedNode);
			assert.strictEqual(appendedNode.querySelector('h3').textContent, 'Data .name = BAR');
			assert.strictEqual(appendedNode.id, newUid);
		});

	});

	suite('In-place mode', function() {
		test('in-place construct fails with template string', function() {
			var binder;
			var failed = false;
			try {
				binder = new Binder('<div>THIS SHOULD FAIL!</div>', {
					'#textContent': 'THIS IS NEVER USED BECAUSE CONSTRUCTOR SHOULD FAIL'
				}, null, true);
			} catch (e) {
				failed = true;
			}
			assert.strictEqual(typeof binder, 'undefined', 'Binder should not have been constructed');
			assert(failed, 'In-place binder construct should fail with template string');
		});

		test('construct and bind from dom node', function() {
			var binder = new Binder(testNodes.inplace, {
				'h3': 'Data .name = {{name}}',
				'h4': 'Last Populated by:- Suite: "{{suiteName}}" Test: "{{testName}}"'
			}, null, true);
			assert.strictEqual(binder.isInplace, true);
			binder.bind({
				'name': 'FOO',
				'suiteName': 'In-place mode',
				'testName': 'construct and bind from dom node'
			});
			assert.strictEqual(testNodes.inplaceH3.textContent, 'Data .name = FOO');
		});

		test('@event.bound binding (event fires)', function() {
			var boundEventFired = false;
			var binder = new Binder(testNodes.inplace, {
				'h3': 'Data .name = {{name}}',
				'h4': 'Last Populated by:- Suite: "{{suiteName}}" Test: "{{testName}}"',
				'@event.bound': function(evt, boundNode, targetNode, data) {
					boundEventFired = true;
				}
			}, null, true);
			binder.bind({
				'name': 'FOO',
				'suiteName': 'In-place mode',
				'testName': '@event.bound binding (event fires)'
			});
			assert.strictEqual(boundEventFired, true, 'Binding @event.bound should gave fired');
		});

		test('rebind', function() {
			var binder = new Binder(testNodes.inplace, {
				'h3': 'Data .name = {{name}}',
				'h4': 'Last Populated by:- Suite: "{{suiteName}}" Test: "{{testName}}"'
			}, null, true);
			assert.strictEqual(binder.isInplace, true);
			var testData = {
				'name': 'FOO',
				'suiteName': 'In-place mode',
				'testName': 'rebind'
			};
			binder.bind(testData);
			assert.strictEqual(testNodes.inplaceH3.textContent, 'Data .name = FOO');
			var newData = Object.assign({}, testData, {
				'name': 'BAR'
			});
			binder.rebind(newData);
			assert.strictEqual(testNodes.inplaceH3.textContent, 'Data .name = BAR');
		});

		test('rebind (once only bindings are re-bound)', function() {
			var binder = new Binder(testNodes.inplace, {
				'!h3': 'Data .name = {{name}}',
				'h4': 'Last Populated by:- Suite: "{{suiteName}}" Test: "{{testName}}"'
			}, null, true);
			assert.strictEqual(binder.isInplace, true);
			var testData = {
				'name': 'FOO',
				'suiteName': 'In-place mode',
				'testName': 'rebind (once only bindings are re-bound)'
			};
			binder.bind(testData);
			assert.strictEqual(testNodes.inplaceH3.textContent, 'Data .name = FOO');
			var newData = Object.assign({}, testData, {
				'name': 'BAR'
			});
			binder.rebind(newData);
			assert.strictEqual(testNodes.inplaceH3.textContent, 'Data .name = BAR');
		});

		test('rebind (data modified)', function() {
			var binder = new Binder(testNodes.inplace, {
				'h3': 'Data .name = {{name}}',
				'h4': 'Last Populated by:- Suite: "{{suiteName}}" Test: "{{testName}}"'
			}, null, true);
			assert.strictEqual(binder.isInplace, true);
			var testData = {
				'name': 'FOO',
				'suiteName': 'In-place mode',
				'testName': 'rebind (data modified)'
			};
			binder.bind(testData);
			assert.strictEqual(testNodes.inplaceH3.textContent, 'Data .name = FOO');
			testData.name = 'BAR';
			// in-place rebind without arg just updates from the original data...
			binder.rebind();
			assert.strictEqual(testNodes.inplaceH3.textContent, 'Data .name = BAR');
		});
	});

	suite('Binding selector and binding instructions', function() {
		test('#textContent binding (explicit)', function() {
			var binder = new Binder('<p></p>', {
				'#textContent': 'name'
			});
			var newNode = binder.bind({
				'name': 'foo'
			});
			assert.strictEqual(newNode.textContent, 'foo');
		});

		test('#textContent binding (implicit)', function() {
			var binder = new Binder('<p></p>', {
				'': 'name' // empty binding selector assumed to be #textContent
			});
			var newNode = binder.bind({
				'name': 'foo'
			});
			assert.strictEqual(newNode.textContent, 'foo');
		});

		test('@class.add binding', function() {
			var newUid = issueNewUID();
			var binder = new Binder(testNodes.cookieCutter, {
				'@id': 'uid',
				'h3': 'name',
				'h3 @class.add': 'name',
				'h4': 'Generated by:- Suite: "{{suiteName}}" Test: "{{testName}}"'
			});
			var testData = {
				'uid': newUid,
				'name': 'FOO',
				'suiteName': 'Binding selector and binding instructions',
				'testName': '@class.add binding'
			};
			var boundNode = binder.bind(testData);
			testNodes.cookieCutAppendArea.appendChild(boundNode);
			var appendedNode = testNodes.cookieCutAppendArea.querySelector('#' + newUid);
			assert(appendedNode.querySelector('h3').classList.contains('FOO'), "Class token should have been added");
		});

		test('@class.add binding (multiple)', function() {
			var newUid = issueNewUID();
			var binder = new Binder(testNodes.cookieCutter, {
				'@id': 'uid',
				'h3': 'name',
				'h3 @class.add': function(data) {
					return [data.name, data.name.toLowerCase()];
				},
				'h4': 'Generated by:- Suite: "{{suiteName}}" Test: "{{testName}}"'
			});
			var testData = {
				'uid': newUid,
				'name': 'FOO',
				'suiteName': 'Binding selector and binding instructions',
				'testName': '@class.add binding (multiple)'
			};
			var boundNode = binder.bind(testData);
			testNodes.cookieCutAppendArea.appendChild(boundNode);
			var appendedNode = testNodes.cookieCutAppendArea.querySelector('#' + newUid);
			assert(appendedNode.querySelector('h3').classList.contains('FOO'), "Class token should have been added");
			assert(appendedNode.querySelector('h3').classList.contains('foo'), "Class token should have been added");
		});

		test('@class.remove binding', function() {
			var newUid = issueNewUID();
			// check that original node has the class we're going to remove...
			assert.strictEqual(testNodes.cookieCutter.classList.contains('remove-this-class'), true, "Template node must originally have class 'remove-this-class' to test its removal");
			var binder = new Binder(testNodes.cookieCutter, {
				'@id': 'uid',
				'h3': 'name',
				'@class.remove': function(data) {
					return 'remove-this-class'
				},
				'h4': 'Generated by:- Suite: "{{suiteName}}" Test: "{{testName}}"'
			});
			var testData = {
				'uid': newUid,
				'name': 'FOO',
				'suiteName': 'Binding selector and binding instructions',
				'testName': '@class.remove binding'
			};
			var boundNode = binder.bind(testData);
			testNodes.cookieCutAppendArea.appendChild(boundNode);
			var appendedNode = testNodes.cookieCutAppendArea.querySelector('#' + newUid);
			assert(!appendedNode.classList.contains('remove-this-class'), "Class token should have been removed");
		});

		test('@class.remove binding (multiple)', function() {
			var newUid = issueNewUID();
			// check that original node has the class we're going to remove...
			assert.strictEqual(testNodes.cookieCutter.classList.contains('remove-this-class'), true, "Template node must originally have class 'remove-this-class' to test its removal");
			assert.strictEqual(testNodes.cookieCutter.classList.contains('remove-this-class-2'), true, "Template node must originally have class 'remove-this-class-2' to test its removal");
			var binder = new Binder(testNodes.cookieCutter, {
				'@id': 'uid',
				'h3': 'name',
				'@class.remove': function(data) {
					return ['remove-this-class', 'remove-this-class-2'];
				},
				'h4': 'Generated by:- Suite: "{{suiteName}}" Test: "{{testName}}"'
			});
			var testData = {
				'uid': newUid,
				'name': 'FOO',
				'suiteName': 'Binding selector and binding instructions',
				'testName': '@class.remove binding (multiple)'
			};
			var boundNode = binder.bind(testData);
			testNodes.cookieCutAppendArea.appendChild(boundNode);
			var appendedNode = testNodes.cookieCutAppendArea.querySelector('#' + newUid);
			assert(!appendedNode.classList.contains('remove-this-class'), "Class token should have been removed");
			assert(!appendedNode.classList.contains('remove-this-class-2'), "Class token should have been removed");
		});

		test('#innerHTML binding', function() {
			var newUid = issueNewUID();
			var binder = new Binder(testNodes.cookieCutter, {
				'@id': 'uid',
				'h3': 'Data .name = {{name}}',
				'h4 #innerHTML': function(data) {
					return 'Generated by:- Suite: "<strong>' + data.suiteName + '</strong>" Test: "<strong>' + data.testName + '</strong>"';
				}
			});
			var testData = {
				'uid': newUid,
				'name': 'FOO',
				'suiteName': 'Binding selector and binding instructions',
				'testName': '#innerHTML binding'
			};
			var boundNode = binder.bind(testData);
			testNodes.cookieCutAppendArea.appendChild(boundNode);
			var appendedNode = testNodes.cookieCutAppendArea.querySelector('#' + newUid);
			assert.strictEqual(appendedNode.querySelector('h4').innerHTML, 'Generated by:- Suite: "<strong>' + testData.suiteName + '</strong>" Test: "<strong>' + testData.testName + '</strong>"');
		});

		test('#innerHTML binding (using curlies)', function() {
			var newUid = issueNewUID();
			var binder = new Binder(testNodes.cookieCutter, {
				'@id': 'uid',
				'h3': 'Data .name = {{name}}',
				'h4 #innerHTML': 'Generated by:- Suite: "<strong>{{suiteName}}</strong>" Test: "<strong>{{testName}}</strong>"'
			});
			var testData = {
				'uid': newUid,
				'name': 'FOO',
				'suiteName': 'Binding selector and binding instructions',
				'testName': '#innerHTML binding (using curlies)'
			};
			var boundNode = binder.bind(testData);
			testNodes.cookieCutAppendArea.appendChild(boundNode);
			var appendedNode = testNodes.cookieCutAppendArea.querySelector('#' + newUid);
			assert.strictEqual(appendedNode.querySelector('h4').innerHTML, 'Generated by:- Suite: "<strong>' + testData.suiteName + '</strong>" Test: "<strong>' + testData.testName + '</strong>"');
		});

		test('#append binding', function() {
			var newUid = issueNewUID();
			var binder = new Binder(testNodes.cookieCutter, {
				'@id': 'uid',
				'h3': 'Data .name = {{name}}',
				'h4 #append': function(data) {
					var boldSuiteName = document.createElement('strong');
					boldSuiteName.appendChild(document.createTextNode(data.suiteName));
					var boldTestName = document.createElement('strong');
					boldTestName.appendChild(document.createTextNode(data.testName));
					return [
						document.createTextNode('Generated by:- Suite: "'),
						boldSuiteName,
						document.createTextNode('" Test: "'),
						boldTestName,
						document.createTextNode('"')
					];
				}
			});
			var testData = {
				'uid': newUid,
				'name': 'FOO',
				'suiteName': 'Binding selector and binding instructions',
				'testName': '#append binding'
			};
			var boundNode = binder.bind(testData);
			testNodes.cookieCutAppendArea.appendChild(boundNode);
			var appendedNode = testNodes.cookieCutAppendArea.querySelector('#' + newUid);
			assert.strictEqual(appendedNode.querySelector('h4').innerHTML, 'Generated by:- Suite: "<strong>' + testData.suiteName + '</strong>" Test: "<strong>' + testData.testName + '</strong>"');
		});

		test('only one @event.bound binding can be specified', function() {
			var boundEventFired = false;
			var failed = false;
			try {
				var binder = new Binder(testNodes.inplace, {
					'h3': 'Data .name = {{name}}',
					'h4': 'Last Populated by:- Suite: "{{suiteName}}" Test: "{{testName}}"',
					'@event.bound': function (evt, boundNode, targetNode, data) {
						boundEventFired = true;
					},
					'h3 @event.bound': function (evt, boundNode, targetNode, data) {
						boundEventFired = true;
					}
				}, null, true);
			} catch (e) {
				failed = true;
			}
			assert(failed, 'Binder construct with multiple @event.bound bindings should fail');
		});

		test('"this" (binding scope) in binding instruction', function() {
			var newUid = issueNewUID();
			var scopeObject = {
				lastId: 'A1'
			};
			var binder = new Binder(testNodes.cookieCutter, {
				'@id': 'uid',
				'h3': 'this.lastId',
				'h4': 'Generated by:- Suite: "{{suiteName}}" Test: "{{testName}}"'
			}, scopeObject);
			var testData = {
				'uid': newUid,
				'name': 'FOO',
				'suiteName': 'Binding selector and binding instructions',
				'testName': '"this" (binding scope) in binding instruction'
			};
			var boundNode = binder.bind(testData);
			testNodes.cookieCutAppendArea.appendChild(boundNode);
			var appendedNode = testNodes.cookieCutAppendArea.querySelector('#' + newUid);
			assert.strictEqual(appendedNode.querySelector('h3').textContent, 'A1');
		});

		test('"this" (binding scope) in binding instruction curlies', function() {
			var newUid = issueNewUID();
			var scopeObject = {
				lastId: 'A1'
			};
			var binder = new Binder(testNodes.cookieCutter, {
				'@id': 'uid',
				'h3': 'ID is {{this.lastId}}',
				'h4': 'Generated by:- Suite: "{{suiteName}}" Test: "{{testName}}"'
			}, scopeObject);
			var testData = {
				'uid': newUid,
				'name': 'FOO',
				'suiteName': 'Binding selector and binding instructions',
				'testName': '"this" (binding scope) in binding instruction curlies'
			};
			var boundNode = binder.bind(testData);
			testNodes.cookieCutAppendArea.appendChild(boundNode);
			var appendedNode = testNodes.cookieCutAppendArea.querySelector('#' + newUid);
			assert.strictEqual(appendedNode.querySelector('h3').textContent, 'ID is A1');
		});

		test('$expression in binding instruction', function() {
			var newUid = issueNewUID();
			var binder = new Binder(testNodes.cookieCutter, {
				'@id': 'uid',
				'h3': '$data.name.toLowerCase()',
				'h4': 'Generated by:- Suite: "{{suiteName}}" Test: "{{testName}}"'
			});
			var testData = {
				'uid': newUid,
				'name': 'FOO',
				'suiteName': 'Binding selector and binding instructions',
				'testName': '$expression in binding instruction'
			};
			var boundNode = binder.bind(testData);
			testNodes.cookieCutAppendArea.appendChild(boundNode);
			var appendedNode = testNodes.cookieCutAppendArea.querySelector('#' + newUid);
			assert.strictEqual(appendedNode.querySelector('h3').textContent, 'foo');
		});

		test('$expression in binding instruction curlies', function() {
			var newUid = issueNewUID();
			var scopeObject = {
				todayIs: new Date()
			};
			var binder = new Binder(testNodes.cookieCutter, {
				'@id': 'uid',
				'h3': 'Today is {{$this.todayIs.toLocaleDateString()}} and name is {{$data.name.toLowerCase()}}',
				'h4': 'Generated by:- Suite: "{{suiteName}}" Test: "{{testName}}"'
			}, scopeObject);
			var testData = {
				'uid': newUid,
				'name': 'FOO',
				'suiteName': 'Binding selector and binding instructions',
				'testName': '$expression in binding instruction curlies'
			};
			var boundNode = binder.bind(testData);
			testNodes.cookieCutAppendArea.appendChild(boundNode);
			var appendedNode = testNodes.cookieCutAppendArea.querySelector('#' + newUid);
			assert.strictEqual(appendedNode.querySelector('h3').textContent, 'Today is ' + scopeObject.todayIs.toLocaleDateString() + ' and name is foo');
		});

		test('@dataset binding', function() {
			var newUid = issueNewUID();
			var binder = new Binder(testNodes.cookieCutter, {
				'@id': 'uid',
				'h3': 'name',
				'h3 @dataset.storedData': 'name',
				'h4': 'Generated by:- Suite: "{{suiteName}}" Test: "{{testName}}"'
			});
			var testData = {
				'uid': newUid,
				'name': 'FOO',
				'suiteName': 'Binding selector and binding instructions',
				'testName': '@dataset binding'
			};
			var boundNode = binder.bind(testData);
			testNodes.cookieCutAppendArea.appendChild(boundNode);
			var appendedNode = testNodes.cookieCutAppendArea.querySelector('#' + newUid);
			assert.strictEqual(appendedNode.querySelector('h3').dataset.storedData, 'FOO');
		});

		test('node @property binding', function() {
			var newUid = issueNewUID();
			var binder = new Binder(testNodes.cookieCutter, {
				'@id': 'uid',
				'h3': 'name',
				'h3 @property.storedData': function(data) {
					return data;
				},
				'h4': 'Generated by:- Suite: "{{suiteName}}" Test: "{{testName}}"'
			});
			var testData = {
				'uid': newUid,
				'name': 'FOO',
				'suiteName': 'Binding selector and binding instructions',
				'testName': 'node @property binding'
			};
			var boundNode = binder.bind(testData);
			testNodes.cookieCutAppendArea.appendChild(boundNode);
			var appendedNode = testNodes.cookieCutAppendArea.querySelector('#' + newUid);
			assert.strictEqual(appendedNode.querySelector('h3').storedData, testData);
		});

		test('node @property binding (in-place mode)', function() {
			var binder = new Binder(testNodes.inplace, {
				'h3': 'Data .name = {{name}}',
				'h3 @property.storedData': function(data) {
					return data;
				},
				'h4': 'Last Populated by:- Suite: "{{suiteName}}" Test: "{{testName}}"'
			}, null, true);
			var testData = {
				'name': 'FOO',
				'suiteName': 'Binding selector and binding instructions',
				'testName': 'node @property binding (in-place mode)'
			};
			binder.bind(testData);
			assert.strictEqual(testNodes.inplaceH3.storedData, testData);
		});

		test('@style binding', function() {
			var newUid = issueNewUID();
			var binder = new Binder(testNodes.cookieCutter, {
				'@id': 'uid',
				'@style.backgroundColor': function(data) {
					return 'lightcyan';
				},
				'h3': 'name',
				'h4': 'Generated by:- Suite: "{{suiteName}}" Test: "{{testName}}"'
			});
			var testData = {
				'uid': newUid,
				'name': 'FOO',
				'suiteName': 'Binding selector and binding instructions',
				'testName': '@style binding'
			};
			var boundNode = binder.bind(testData);
			testNodes.cookieCutAppendArea.appendChild(boundNode);
			var appendedNode = testNodes.cookieCutAppendArea.querySelector('#' + newUid);
			assert.strictEqual(appendedNode.style.backgroundColor, 'lightcyan');
		});

		test('multiple matching selectors fails', function() {
			var newUid = issueNewUID();
			var failed = false;
			var binder;
			try {
				binder = new Binder(testNodes.cookieCutterComplex, {
					'@id': 'uid',
					'h3': 'name',
					// there are two <h4> elements so this next selector should cause a failure...
					'h4': 'Generated by:- Suite: "{{suiteName}}" Test: "{{testName}}"'
				});
			} catch (e) {
				failed = true;
			}
			assert(failed, 'Multiple matching nodes for selector should cause failure');
		});

		test('immediate child binding selector', function() {
			if (scopeSupported) {
				var newUid = issueNewUID();
				var binder = new Binder(testNodes.cookieCutterComplex, {
					'@id': 'uid',
					'h3': 'name',
					'h4.test': 'Generated by:- Suite: "{{suiteName}}" Test: "{{testName}}"',
					':scope > .sub1 > .sub2': function (data) {
						return 'This is a test of ' + data.name;
					}
				});
				var testData = {
					'uid': newUid,
					'name': 'FOO',
					'suiteName': 'Binding selector and binding instructions',
					'testName': 'immediate child binding selector'
				};
				var boundNode = binder.bind(testData);
				testNodes.cookieCutAppendArea.appendChild(boundNode);
				var appendedNode = testNodes.cookieCutAppendArea.querySelector('#' + newUid);
				assert.strictEqual(appendedNode.querySelector(':scope > .sub1 > .sub2').textContent, 'This is a test of FOO');
			} else {
				assert.fail(scopeSupported, true, 'Browser does not support :scope in CSS selectors!');
			}
		});

		test('descendant binding selector', function() {
			var newUid = issueNewUID();
			var binder = new Binder(testNodes.cookieCutterComplex, {
				'@id': 'uid',
				'h3': 'name',
				'h4.test': 'Generated by:- Suite: "{{suiteName}}" Test: "{{testName}}"',
				'.sub1 > .sub2': function(data) {
					return 'This is a test of ' + data.name;
				}
			});
			var testData = {
				'uid': newUid,
				'name': 'FOO',
				'suiteName': 'Binding selector and binding instructions',
				'testName': 'descendant binding selector'
			};
			var boundNode = binder.bind(testData);
			testNodes.cookieCutAppendArea.appendChild(boundNode);
			if (scopeSupported) {
				var appendedNode = testNodes.cookieCutAppendArea.querySelector('#' + newUid);
				assert.strictEqual(appendedNode.querySelector(':scope > .sub1 > .sub2').textContent, 'This is a test of FOO');
			} else {
				assert.strictEqual(testNodes.cookieCutAppendArea.querySelector('#' + newUid + ' > .sub1 > .sub2').textContent, 'This is a test of FOO');
			}
		});

		test('descendant binding selectors (using object structure)', function() {
			var newUid = issueNewUID();
			var binder = new Binder(testNodes.cookieCutterComplex, {
				'@id': 'uid',
				'h3': 'name',
				'h4.test': 'Generated by:- Suite: "{{suiteName}}" Test: "{{testName}}"',
				'.sub1': {
					'@class.add': '{{name}}-class',
					'.sub2': {
						'#textContent': 'This is a test of {{name}}',
						'@class.add': '{{name}}-class'
					}
				}
			});
			var testData = {
				'uid': newUid,
				'name': 'FOO',
				'suiteName': 'Binding selector and binding instructions',
				'testName': 'descendant binding selectors (using object structure)'
			};
			var boundNode = binder.bind(testData);
			testNodes.cookieCutAppendArea.appendChild(boundNode);
			var appendedNode = testNodes.cookieCutAppendArea.querySelector('#' + newUid);
			assert(appendedNode.querySelector('.sub1').classList.contains('FOO-class'), "Class token should have been added");
			assert.strictEqual(appendedNode.querySelector('.sub1 .sub2').textContent, 'This is a test of FOO');
			assert(appendedNode.querySelector('.sub1 .sub2').classList.contains('FOO-class'), "Class token should have been added");
		});

		test('attribute removal (check resets)', function() {
			var binder = new Binder(testNodes.cookieCutterComplex, {
				'@id': 'uid',
				'h3': 'name',
				'h4.test': 'Generated by:- Suite: "{{suiteName}}" Test: "{{testName}}"',
				'input': {
					'@disabled.remove': function(data) {
						return !data.isDisabled;
					},
					'@placeholder': function(data) {
						return data.isDisabled ? '(this is disabled)' : '(this is not disabled)';
					}
				}
			});
			var testDatas = [
				{
					'uid': issueNewUID(),
					'name': 'FOO[1]',
					'suiteName': 'Binding selector and binding instructions',
					'testName': 'attribute removal (check resets)',
					'isDisabled': true
				},
				{
					'uid': issueNewUID(),
					'name': 'FOO[2]',
					'suiteName': 'Binding selector and binding instructions',
					'testName': 'attribute removal (check resets)',
					'isDisabled': false
				},
				{
					'uid': issueNewUID(),
					'name': 'FOO[3]',
					'suiteName': 'Binding selector and binding instructions',
					'testName': 'attribute removal (check resets)',
					'isDisabled': true
				},
				{
					'uid': issueNewUID(),
					'name': 'FOO[4]',
					'suiteName': 'Binding selector and binding instructions',
					'testName': 'attribute removal (check resets)',
					'isDisabled': false
				}
			];
			var boundNodes = [];
			var i,imax = testDatas.length;
			for (i = 0; i < imax; i++) {
				boundNodes.push(testNodes.cookieCutAppendArea.appendChild(binder.bind(testDatas[i])));
			}
			for (i = 0; i < imax; i++) {
				var inputNode = boundNodes[i].querySelector('input');
				assert.strictEqual(inputNode.disabled, testDatas[i].isDisabled);
			}
		});

		test('property set (check resets on rebinding)', function() {
			var binder = new Binder(testNodes.cookieCutterComplex, {
				'@id': 'uid',
				'h3': 'name',
				'h4.test': 'Generated by:- Suite: "{{suiteName}}" Test: "{{testName}}"',
				'input': {
					'@property.disabled': function(data) {
						return data.isDisabled;
					},
					'!@placeholder': function(data) {
						return data.isDisabled ? '(this was disabled)' : '(this was not disabled)';
					}
				}
			});
			var testDatas = [
				{
					'uid': issueNewUID(),
					'name': 'FOO[1]',
					'suiteName': 'Binding selector and binding instructions',
					'testName': 'property set (check resets on rebinding)',
					'isDisabled': true
				},
				{
					'uid': issueNewUID(),
					'name': 'FOO[2]',
					'suiteName': 'Binding selector and binding instructions',
					'testName': 'property set (check resets on rebinding)',
					'isDisabled': false
				},
				{
					'uid': issueNewUID(),
					'name': 'FOO[3]',
					'suiteName': 'Binding selector and binding instructions',
					'testName': 'property set (check resets on rebinding)',
					'isDisabled': true
				},
				{
					'uid': issueNewUID(),
					'name': 'FOO[4]',
					'suiteName': 'Binding selector and binding instructions',
					'testName': 'property set (check resets on rebinding)',
					'isDisabled': false
				}
			];
			var boundNodes = [];
			var i,imax = testDatas.length;
			for (i = 0; i < imax; i++) {
				boundNodes.push(testNodes.cookieCutAppendArea.appendChild(binder.bind(testDatas[i])));
			}
			for (i = 0; i < imax; i++) {
				testDatas[i].isDisabled = !testDatas[i].isDisabled;
				binder.rebind(testDatas[i], boundNodes[i]);
				var inputNode = boundNodes[i].querySelector('input');
				assert.strictEqual(inputNode.disabled, testDatas[i].isDisabled);
			}
		});
	});

	function htmlTemplatesSupported() {
		return 'content' in document.createElement('template');
	}

	function suiteForHtmlTemplates() {
		suite('Cookie-cutter mode (using HTML <template>)', function() {
			test('construct from <template>', function() {
				var newUid = issueNewUID();
				var binder = new Binder(testNodes.cookieCutterTemplate, {
					'@id': 'uid',
					'h2 #textContent': function(data) {
						return 'Cookie-cutter Binder <template> Test Node';
					},
					'h3': 'Data .name = {{name}}',
					'h4': 'Generated by:- Suite: "{{suiteName}}" Test: "{{testName}}"'
				});
				var boundNode = binder.bind({
					'uid': newUid,
					'name': 'FOO',
					'suiteName': 'Cookie-cutter mode (using HTML <template>)',
					'testName': 'construct from <template>'
				});
				testNodes.cookieCutAppendArea.appendChild(boundNode);
				var appendedNode = testNodes.cookieCutAppendArea.querySelector('#' + newUid);
				assert.strictEqual(appendedNode.querySelector('h3').textContent, 'Data .name = FOO');
			});
		});
	}
	if (htmlTemplatesSupported()) {
		suiteForHtmlTemplates();
	}
}();
